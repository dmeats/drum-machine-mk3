{"version":3,"sources":["sounds/cabase.mp3","sounds/conga.mp3","sounds/kick.mp3","sounds/kick2.mp3","sounds/lotom.mp3","sounds/snare.mp3","sounds/snare2.mp3","sounds/timbale.mp3","sounds/tomlo.mp3","Components/IndivPad.jsx","Components/Pads.jsx","Components/Readout.jsx","Components/DrumMachine.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","IndivPad","props","aPPLContext","useContext","APPLContext","useState","cssname","setCSSname","playing","setplaying","letter","letterpressed","changeStyleAndPlaySound","console","log","name","soundclip","document","getElementById","idpd","currentTime","volume","play","setTimeout","Message","typeofinstrument","ChangeMessage","useEffect","addEventListener","event","keyName","key","toUpperCase","className","onClick","id","soundsrc","src","autoPlay","Pads","cabase","conga","kick","kick2","lotom","snare","snare2","timbal","tomlo","Readout","DrumMachine","React","createContext","App","setMessage","Provider","value","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","URL","process","href","origin","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.20611e74.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cabase.bfd9c003.mp3\";","module.exports = __webpack_public_path__ + \"static/media/conga.7617f9c5.mp3\";","module.exports = __webpack_public_path__ + \"static/media/kick.ca647233.mp3\";","module.exports = __webpack_public_path__ + \"static/media/kick2.6e4f8c14.mp3\";","module.exports = __webpack_public_path__ + \"static/media/lotom.7dba5ee3.mp3\";","module.exports = __webpack_public_path__ + \"static/media/snare.cb0438ab.mp3\";","module.exports = __webpack_public_path__ + \"static/media/snare2.fca83d16.mp3\";","module.exports = __webpack_public_path__ + \"static/media/timbale.1f3b9b77.mp3\";","module.exports = __webpack_public_path__ + \"static/media/tomlo.feaae22f.mp3\";","import React, { useState,useEffect,useContext} from 'react'\r\nimport {APPLContext} from './../App'\r\nimport '../CSS/IndivPad.css'\r\n\r\nconst IndivPad = (props) => {\r\n\r\nconst aPPLContext = useContext(APPLContext)\r\nconst [cssname, setCSSname] = useState ('off');\r\nconst [playing, setplaying] = useState (false);\r\nconst [letterpressed, setLetterpressed] = useState (props.letter)\r\n\r\n\r\n\r\n\r\n\r\n      \r\n\r\n\r\nconst changeStyleAndPlaySound = (playing) => {\r\n  console.log('in changestyle ' + cssname)\r\n   let name = playing ? 'on' : 'off'\r\n  // this.myRef = React.createRef();\r\n   const soundclip = document.getElementById(props.idpd)\r\n   console.log(soundclip)\r\n   soundclip.currentTime = 0;\r\n   soundclip.volume = .8;\r\n   soundclip.play();\r\n  return(\r\n       name\r\n  )\r\n}\r\n\r\n\r\nconst play = (playing,cssname) =>{\r\n  \r\n  setplaying (playing = true)\r\n  console.log('in play 1' + cssname)\r\n  setTimeout(() => {setCSSname(changeStyleAndPlaySound(playing))},50)\r\n  \r\n  setplaying (playing = false)\r\n \r\n  setCSSname(cssname = 'on')\r\n  console.log('in play 2 ' + cssname)\r\n  //set message of instrument to be displayed\r\n  let Message = props.typeofinstrument\r\n  aPPLContext.ChangeMessage(Message)\r\n }\r\n\r\nuseEffect(()=>{\r\n  document.addEventListener('keydown', (event) => {\r\n    const keyName = event.key;\r\n\r\n  //check for keys pressed and play the clip\r\n   console.log(keyName + '  ' + letterpressed)\r\n    \r\n    if (keyName.toUpperCase()===letterpressed){\r\n      \r\n      play();\r\n    }\r\n  }, false);\r\n\r\n \r\n  document.addEventListener('keyup', (event) => {\r\n    const keyName = event.key;\r\n  \r\n    \r\n    if (keyName === 'Control') {\r\n     console.log('Control key was released');\r\n    }\r\n  }, false);\r\n},[letterpressed])\r\n\r\n\r\n\r\n    return(\r\n        <div className={cssname}\r\n               onClick={() => play(playing,cssname)}\r\n               id={props.letter}>{props.letter}\r\n               \r\n        {console.log(cssname + ' ' + props.soundsrc + ' ' + props.idpd)}\r\n        <audio  id={props.idpd} src={props.soundsrc} autoPlay/>\r\n        \r\n        </div>\r\n          )\r\n}\r\n\r\nexport default IndivPad;\r\n","import React from 'react'\r\nimport IndivPad from '../Components/IndivPad'\r\nimport '../CSS/Pads.css'\r\nimport cabase from '../sounds/cabase.mp3'\r\nimport conga from '../sounds/conga.mp3'\r\nimport kick from '../sounds/kick.mp3'\r\nimport kick2 from '../sounds/kick2.mp3'\r\nimport lotom from '../sounds/lotom.mp3'\r\nimport snare from '../sounds/snare.mp3'\r\nimport snare2 from '../sounds/snare2.mp3'\r\nimport timbal from '../sounds/timbale.mp3'\r\nimport tomlo from '../sounds/tomlo.mp3'\r\n\r\n\r\nconst Pads = () =>{\r\n\r\n    //const [state, setState] = useState({\r\n       \r\n    //    id:[]\r\n    //    soundfile: '../sounds/cabase.wav',\r\n    //  });\r\n    \r\n    //Q, W, E, A, S, D, Z, X, C.\r\n    return(\r\n        <div className='DrumPads'>\r\n            <table>\r\n                <tbody>\r\n                    <tr>\r\n                        <td><IndivPad soundsrc={cabase} idpd=\"1\" letter='Q' typeofinstrument = 'cabase'/></td>\r\n                        <td><IndivPad soundsrc={conga} idpd=\"2\" letter='W' typeofinstrument = 'conga'/></td>\r\n                        <td><IndivPad soundsrc={kick} idpd=\"3\" letter='E' typeofinstrument = 'kick'/></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td><IndivPad soundsrc={kick2} idpd=\"4\" letter='A' typeofinstrument = 'kick2'/></td>\r\n                        <td><IndivPad soundsrc={lotom} idpd=\"5\" letter='S' typeofinstrument = 'lotom'/></td>\r\n                        <td><IndivPad soundsrc={snare} idpd=\"6\" letter='D' typeofinstrument = 'snare'/></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td><IndivPad soundsrc={snare2} idpd=\"7\" letter='Z' typeofinstrument = 'snare2'/></td>\r\n                        <td><IndivPad soundsrc={timbal} idpd=\"8\" letter='X' typeofinstrument = 'timbal'/></td>\r\n                        <td><IndivPad soundsrc={tomlo} idpd=\"9\" letter='C' typeofinstrument = 'phaser'/></td>\r\n                    </tr>\r\n                </tbody>\r\n           </table>\r\n        </div>\r\n\r\n    )\r\n    \r\n}\r\n\r\nexport default Pads;","import React, {useContext} from 'react'\r\nimport '../CSS/Readout.css'\r\nimport {APPLContext} from './../App'\r\n\r\nconst Readout = () =>{\r\n    const aPPLContext = useContext(APPLContext)\r\n    return(\r\n        <div className='Readout-Container'>\r\n           \r\n                    <div className='Readout'>\r\n                        {aPPLContext.Message}\r\n                    </div>\r\n        </div>\r\n    )\r\n} \r\nexport default Readout","import React from 'react'\r\nimport Pads from '../Components/Pads'\r\nimport Readout from '../Components/Readout'\r\nimport '../CSS/DrumMachine.css'\r\n\r\n    const DrumMachine = () => {\r\n\r\n\r\n            return(\r\n\r\n                <div className='Display'>\r\n                    <p className='fontstyle'>Digital Beat Kit</p>\r\n                <Readout/>   \r\n                <Pads/>\r\n\r\n                \r\n                </div>\r\n            )\r\n\r\n    }\r\n\r\nexport default DrumMachine;","import React, {useState} from 'react';\nimport DrumMachine from './Components/DrumMachine.jsx'\nimport './App.css';\n\nexport const APPLContext = React.createContext({\n  Message: '',\n  ChangeMessage: () => {},\n  \n});\n\n\n\nfunction App() {\n  \n  const [Message, setMessage] = useState('')\n  \n\n  return (\n    <APPLContext.Provider value = {{\n      Message,\n      setMessage,\n      \n      ChangeMessage: Message => setMessage(Message),\n     \n  \n      }}>\n    <div className=\"App\">\n      <header className=\"App-header\">\n        \n        <DrumMachine />\n        \n      </header>\n    </div>\n    </APPLContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n//serviceWorker.unregister();\n"],"sourceRoot":""}